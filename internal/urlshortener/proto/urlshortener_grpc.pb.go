// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: urlshortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortenerService_Create_FullMethodName      = "/urlshortener.ShortenerService/Create"
	ShortenerService_GetByID_FullMethodName     = "/urlshortener.ShortenerService/GetByID"
	ShortenerService_GetByAuthor_FullMethodName = "/urlshortener.ShortenerService/GetByAuthor"
	ShortenerService_GetByAlias_FullMethodName  = "/urlshortener.ShortenerService/GetByAlias"
	ShortenerService_GetRedirect_FullMethodName = "/urlshortener.ShortenerService/GetRedirect"
	ShortenerService_UpdateAlias_FullMethodName = "/urlshortener.ShortenerService/UpdateAlias"
	ShortenerService_AddAd_FullMethodName       = "/urlshortener.ShortenerService/AddAd"
	ShortenerService_DeleteAd_FullMethodName    = "/urlshortener.ShortenerService/DeleteAd"
	ShortenerService_Delete_FullMethodName      = "/urlshortener.ShortenerService/Delete"
)

// ShortenerServiceClient is the client API for ShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	GetByAuthor(ctx context.Context, in *GetByAuthorRequest, opts ...grpc.CallOption) (*LinksListResponse, error)
	GetByAlias(ctx context.Context, in *GetByAliasRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	GetRedirect(ctx context.Context, in *GetByAliasRequest, opts ...grpc.CallOption) (*RedirectResponse, error)
	UpdateAlias(ctx context.Context, in *UpdateAliasRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	AddAd(ctx context.Context, in *LinkAdRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	DeleteAd(ctx context.Context, in *LinkAdRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerServiceClient(cc grpc.ClientConnInterface) ShortenerServiceClient {
	return &shortenerServiceClient{cc}
}

func (c *shortenerServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, ShortenerService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetByAuthor(ctx context.Context, in *GetByAuthorRequest, opts ...grpc.CallOption) (*LinksListResponse, error) {
	out := new(LinksListResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetByAlias(ctx context.Context, in *GetByAliasRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetByAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetRedirect(ctx context.Context, in *GetByAliasRequest, opts ...grpc.CallOption) (*RedirectResponse, error) {
	out := new(RedirectResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetRedirect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) UpdateAlias(ctx context.Context, in *UpdateAliasRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, ShortenerService_UpdateAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) AddAd(ctx context.Context, in *LinkAdRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, ShortenerService_AddAd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) DeleteAd(ctx context.Context, in *LinkAdRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, ShortenerService_DeleteAd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShortenerService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServiceServer is the server API for ShortenerService service.
// All implementations should embed UnimplementedShortenerServiceServer
// for forward compatibility
type ShortenerServiceServer interface {
	Create(context.Context, *CreateRequest) (*LinkResponse, error)
	GetByID(context.Context, *GetByIDRequest) (*LinkResponse, error)
	GetByAuthor(context.Context, *GetByAuthorRequest) (*LinksListResponse, error)
	GetByAlias(context.Context, *GetByAliasRequest) (*LinkResponse, error)
	GetRedirect(context.Context, *GetByAliasRequest) (*RedirectResponse, error)
	UpdateAlias(context.Context, *UpdateAliasRequest) (*LinkResponse, error)
	AddAd(context.Context, *LinkAdRequest) (*LinkResponse, error)
	DeleteAd(context.Context, *LinkAdRequest) (*LinkResponse, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
}

// UnimplementedShortenerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShortenerServiceServer struct {
}

func (UnimplementedShortenerServiceServer) Create(context.Context, *CreateRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedShortenerServiceServer) GetByID(context.Context, *GetByIDRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedShortenerServiceServer) GetByAuthor(context.Context, *GetByAuthorRequest) (*LinksListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAuthor not implemented")
}
func (UnimplementedShortenerServiceServer) GetByAlias(context.Context, *GetByAliasRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAlias not implemented")
}
func (UnimplementedShortenerServiceServer) GetRedirect(context.Context, *GetByAliasRequest) (*RedirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRedirect not implemented")
}
func (UnimplementedShortenerServiceServer) UpdateAlias(context.Context, *UpdateAliasRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlias not implemented")
}
func (UnimplementedShortenerServiceServer) AddAd(context.Context, *LinkAdRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAd not implemented")
}
func (UnimplementedShortenerServiceServer) DeleteAd(context.Context, *LinkAdRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAd not implemented")
}
func (UnimplementedShortenerServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServiceServer will
// result in compilation errors.
type UnsafeShortenerServiceServer interface {
	mustEmbedUnimplementedShortenerServiceServer()
}

func RegisterShortenerServiceServer(s grpc.ServiceRegistrar, srv ShortenerServiceServer) {
	s.RegisterService(&ShortenerService_ServiceDesc, srv)
}

func _ShortenerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetByAuthor(ctx, req.(*GetByAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetByAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetByAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetByAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetByAlias(ctx, req.(*GetByAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetRedirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetRedirect(ctx, req.(*GetByAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_UpdateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).UpdateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_UpdateAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).UpdateAlias(ctx, req.(*UpdateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_AddAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).AddAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_AddAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).AddAd(ctx, req.(*LinkAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_DeleteAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).DeleteAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_DeleteAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).DeleteAd(ctx, req.(*LinkAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerService_ServiceDesc is the grpc.ServiceDesc for ShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlshortener.ShortenerService",
	HandlerType: (*ShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ShortenerService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ShortenerService_GetByID_Handler,
		},
		{
			MethodName: "GetByAuthor",
			Handler:    _ShortenerService_GetByAuthor_Handler,
		},
		{
			MethodName: "GetByAlias",
			Handler:    _ShortenerService_GetByAlias_Handler,
		},
		{
			MethodName: "GetRedirect",
			Handler:    _ShortenerService_GetRedirect_Handler,
		},
		{
			MethodName: "UpdateAlias",
			Handler:    _ShortenerService_UpdateAlias_Handler,
		},
		{
			MethodName: "AddAd",
			Handler:    _ShortenerService_AddAd_Handler,
		},
		{
			MethodName: "DeleteAd",
			Handler:    _ShortenerService_DeleteAd_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShortenerService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlshortener.proto",
}
