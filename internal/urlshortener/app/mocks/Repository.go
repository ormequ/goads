// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	links "goads/internal/urlshortener/links"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddAd provides a mock function with given fields: ctx, linkID, adID
func (_m *Repository) AddAd(ctx context.Context, linkID int64, adID int64) error {
	ret := _m.Called(ctx, linkID, adID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, linkID, adID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAd provides a mock function with given fields: ctx, linkID, adID
func (_m *Repository) DeleteAd(ctx context.Context, linkID int64, adID int64) error {
	ret := _m.Called(ctx, linkID, adID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, linkID, adID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByAlias provides a mock function with given fields: ctx, alias
func (_m *Repository) GetByAlias(ctx context.Context, alias string) (links.Link, error) {
	ret := _m.Called(ctx, alias)

	var r0 links.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (links.Link, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) links.Link); ok {
		r0 = rf(ctx, alias)
	} else {
		r0 = ret.Get(0).(links.Link)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAuthor provides a mock function with given fields: ctx, authorID
func (_m *Repository) GetByAuthor(ctx context.Context, authorID int64) ([]links.Link, error) {
	ret := _m.Called(ctx, authorID)

	var r0 []links.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]links.Link, error)); ok {
		return rf(ctx, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []links.Link); ok {
		r0 = rf(ctx, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]links.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetByID(ctx context.Context, id int64) (links.Link, error) {
	ret := _m.Called(ctx, id)

	var r0 links.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (links.Link, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) links.Link); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(links.Link)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, link
func (_m *Repository) Store(ctx context.Context, link links.Link) (int64, error) {
	ret := _m.Called(ctx, link)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, links.Link) (int64, error)); ok {
		return rf(ctx, link)
	}
	if rf, ok := ret.Get(0).(func(context.Context, links.Link) int64); ok {
		r0 = rf(ctx, link)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, links.Link) error); ok {
		r1 = rf(ctx, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlias provides a mock function with given fields: ctx, id, alias
func (_m *Repository) UpdateAlias(ctx context.Context, id int64, alias string) error {
	ret := _m.Called(ctx, id, alias)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
